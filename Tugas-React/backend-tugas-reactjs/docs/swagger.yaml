definitions:
  controllers.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controllers.RegisterInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  controllers.ageRatingCategoryInput:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  controllers.bookInput:
    properties:
      description:
        type: string
      image_url:
        type: string
      price:
        type: string
      release_year:
        maximum: 2021
        minimum: 1980
        type: integer
      title:
        type: string
      total_page:
        type: integer
    required:
    - description
    - image_url
    - price
    - release_year
    - title
    - total_page
    type: object
  controllers.footballerInput:
    properties:
      age:
        type: integer
      name:
        type: string
      nationality:
        type: string
    type: object
  controllers.movieInput:
    properties:
      age_rating_category_id:
        type: integer
      title:
        type: string
      year:
        type: integer
    type: object
  models.AgeRatingCategory:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      userID:
        type: integer
    type: object
  models.Book:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      price:
        type: string
      release_year:
        type: integer
      thickness:
        type: string
      title:
        type: string
      total_page:
        type: integer
      updated_at:
        type: string
    type: object
  models.Dosen:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      jadwals:
        items:
          $ref: '#/definitions/models.JadwalKuliah'
        type: array
      mataKuliah:
        type: string
      nama:
        type: string
      updatedAt:
        type: string
    type: object
  models.Footballer:
    properties:
      age:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      nationality:
        type: string
      updated_at:
        type: string
    type: object
  models.JadwalKuliah:
    properties:
      createdAt:
        type: string
      dosen:
        $ref: '#/definitions/models.Dosen'
      dosenID:
        type: integer
      hari:
        type: string
      id:
        type: integer
      jamMulai:
        type: string
      jamSelesai:
        type: string
      mahasiswa:
        $ref: '#/definitions/models.Mahasiswa'
      mahasiswaID:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Mahasiswa:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      jadwals:
        items:
          $ref: '#/definitions/models.JadwalKuliah'
        type: array
      nama:
        type: string
      updatedAt:
        type: string
    type: object
  models.MataKuliah:
    properties:
      createdAt:
        type: string
      dosens:
        items:
          $ref: '#/definitions/models.Dosen'
        type: array
      id:
        type: integer
      nama:
        type: string
      updatedAt:
        type: string
    type: object
  models.Movie:
    properties:
      ageRatingCategoryID:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    type: object
info:
  contact: {}
paths:
  /age-rating-categories:
    get:
      description: Get a list of AgeRatingCategory.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AgeRatingCategory'
            type: array
      summary: Get all AgeRatingCategory.
      tags:
      - AgeRatingCategory
    post:
      description: Creating a new AgeRatingCategory.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: the body to create a new AgeRatingCategory
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ageRatingCategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AgeRatingCategory'
      security:
      - BearerToken: []
      summary: Create New AgeRatingCategory.
      tags:
      - AgeRatingCategory
  /age-rating-categories/{id}:
    delete:
      description: Delete a AgeRatingCategory by id.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: AgeRatingCategory id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete one AgeRatingCategory.
      tags:
      - AgeRatingCategory
    get:
      description: Get an AgeRatingCategory by id.
      parameters:
      - description: AgeRatingCategory id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AgeRatingCategory'
      summary: Get AgeRatingCategory.
      tags:
      - AgeRatingCategory
    patch:
      description: Update AgeRatingCategory by id.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: AgeRatingCategory id
        in: path
        name: id
        required: true
        type: string
      - description: the body to update age rating category
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ageRatingCategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AgeRatingCategory'
      security:
      - BearerToken: []
      summary: Update AgeRatingCategory.
      tags:
      - AgeRatingCategory
  /age-rating-categories/{id}/movies:
    get:
      description: Get all Movies by AgeRatingCategoryId.
      parameters:
      - description: AgeRatingCategory id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Movie'
            type: array
      summary: Get Movies.
      tags:
      - AgeRatingCategory
  /books:
    get:
      consumes:
      - application/json
      description: Retrieve a list of books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the library
      parameters:
      - default: Bearer <add_token_here>
        description: Insert JWT token here
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/controllers.bookInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      security:
      - ApiKeyAuth: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a book from the library
      parameters:
      - default: Bearer <add_token_here>
        description: Insert JWT token here
        in: header
        name: Authorization
        required: true
        type: string
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: book deleted
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get detailed information about a book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Get a book by ID
      tags:
      - books
    patch:
      consumes:
      - application/json
      description: Update book details
      parameters:
      - default: Bearer <add_token_here>
        description: Insert JWT token here
        in: header
        name: Authorization
        required: true
        type: string
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/controllers.bookInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      security:
      - ApiKeyAuth: []
      summary: Update a book
      tags:
      - books
  /dosen:
    get:
      consumes:
      - application/json
      description: Get list of all Dosen
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Dosen'
            type: array
      summary: Get all Dosen
      tags:
      - Dosen
    post:
      consumes:
      - application/json
      description: Create a new Dosen
      parameters:
      - description: Dosen
        in: body
        name: dosen
        required: true
        schema:
          $ref: '#/definitions/models.Dosen'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Dosen'
      summary: Create new Dosen
      tags:
      - Dosen
  /dosen/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Dosen by ID
      parameters:
      - description: Dosen ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      summary: Delete a Dosen
      tags:
      - Dosen
    get:
      consumes:
      - application/json
      description: Get a Dosen by ID
      parameters:
      - description: Dosen ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Dosen'
      summary: Get Dosen by ID
      tags:
      - Dosen
    put:
      consumes:
      - application/json
      description: Update an existing Dosen
      parameters:
      - description: Dosen ID
        in: path
        name: id
        required: true
        type: integer
      - description: Dosen
        in: body
        name: dosen
        required: true
        schema:
          $ref: '#/definitions/models.Dosen'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Dosen'
      summary: Update a Dosen
      tags:
      - Dosen
  /footballers:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Footballer'
            type: array
      summary: Get all Footballer.
      tags:
      - Footballer
    post:
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: the body to create a new Footballer
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.footballerInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Footballer'
      security:
      - BearerToken: []
      summary: Create New Footballer.
      tags:
      - Footballer
  /footballers/{id}:
    delete:
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Footballer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete one Footballer.
      tags:
      - Footballer
    get:
      parameters:
      - description: Footballer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Footballer'
      summary: Get Footballer.
      tags:
      - Footballer
    patch:
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Footballer id
        in: path
        name: id
        required: true
        type: string
      - description: the body to update footballer
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.footballerInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Footballer'
      security:
      - BearerToken: []
      summary: Update Footballer.
      tags:
      - Footballer
  /jadwal-kuliah:
    get:
      consumes:
      - application/json
      description: Get list of all Jadwal Kuliah
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.JadwalKuliah'
            type: array
      summary: Get all Jadwal Kuliah
      tags:
      - JadwalKuliah
    post:
      consumes:
      - application/json
      description: Create a new Jadwal Kuliah
      parameters:
      - description: Jadwal Kuliah
        in: body
        name: jadwal
        required: true
        schema:
          $ref: '#/definitions/models.JadwalKuliah'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JadwalKuliah'
      summary: Create new Jadwal Kuliah
      tags:
      - JadwalKuliah
  /jadwal-kuliah/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Jadwal Kuliah by ID
      parameters:
      - description: Jadwal Kuliah ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      summary: Delete a Jadwal Kuliah
      tags:
      - JadwalKuliah
    get:
      consumes:
      - application/json
      description: Get a Jadwal Kuliah by ID
      parameters:
      - description: Jadwal Kuliah ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JadwalKuliah'
      summary: Get Jadwal Kuliah by ID
      tags:
      - JadwalKuliah
    put:
      consumes:
      - application/json
      description: Update an existing Jadwal Kuliah
      parameters:
      - description: Jadwal Kuliah ID
        in: path
        name: id
        required: true
        type: integer
      - description: Jadwal Kuliah
        in: body
        name: jadwal
        required: true
        schema:
          $ref: '#/definitions/models.JadwalKuliah'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JadwalKuliah'
      summary: Update a Jadwal Kuliah
      tags:
      - JadwalKuliah
  /login:
    post:
      description: Logging in to get jwt token to access admin or user api by roles.
      parameters:
      - description: the body to login a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Login as as user.
      tags:
      - Auth
  /mahasiswa:
    get:
      consumes:
      - application/json
      description: Get list of all Mahasiswa
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Mahasiswa'
            type: array
      summary: Get all Mahasiswa
      tags:
      - Mahasiswa
    post:
      consumes:
      - application/json
      description: Create a new Mahasiswa
      parameters:
      - description: Mahasiswa
        in: body
        name: mahasiswa
        required: true
        schema:
          $ref: '#/definitions/models.Mahasiswa'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Mahasiswa'
      summary: Create new Mahasiswa
      tags:
      - Mahasiswa
  /mahasiswa/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Mahasiswa by ID
      parameters:
      - description: Mahasiswa ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      summary: Delete a Mahasiswa
      tags:
      - Mahasiswa
    get:
      consumes:
      - application/json
      description: Get a Mahasiswa by ID
      parameters:
      - description: Mahasiswa ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Mahasiswa'
      summary: Get Mahasiswa by ID
      tags:
      - Mahasiswa
    put:
      consumes:
      - application/json
      description: Update an existing Mahasiswa
      parameters:
      - description: Mahasiswa ID
        in: path
        name: id
        required: true
        type: integer
      - description: Mahasiswa
        in: body
        name: mahasiswa
        required: true
        schema:
          $ref: '#/definitions/models.Mahasiswa'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Mahasiswa'
      summary: Update a Mahasiswa
      tags:
      - Mahasiswa
  /mata-kuliah:
    get:
      consumes:
      - application/json
      description: Get list of all Mata Kuliah
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MataKuliah'
            type: array
      summary: Get all Mata Kuliah
      tags:
      - MataKuliah
    post:
      consumes:
      - application/json
      description: Create a new Mata Kuliah
      parameters:
      - description: Mata Kuliah
        in: body
        name: mataKuliah
        required: true
        schema:
          $ref: '#/definitions/models.MataKuliah'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MataKuliah'
      summary: Create new Mata Kuliah
      tags:
      - MataKuliah
  /mata-kuliah/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Mata Kuliah by ID
      parameters:
      - description: Mata Kuliah ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      summary: Delete a Mata Kuliah
      tags:
      - MataKuliah
    get:
      consumes:
      - application/json
      description: Get a Mata Kuliah by ID
      parameters:
      - description: Mata Kuliah ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MataKuliah'
      summary: Get Mata Kuliah by ID
      tags:
      - MataKuliah
    put:
      consumes:
      - application/json
      description: Update an existing Mata Kuliah
      parameters:
      - description: Mata Kuliah ID
        in: path
        name: id
        required: true
        type: integer
      - description: Mata Kuliah
        in: body
        name: mataKuliah
        required: true
        schema:
          $ref: '#/definitions/models.MataKuliah'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MataKuliah'
      summary: Update a Mata Kuliah
      tags:
      - MataKuliah
  /movie/{id}:
    delete:
      description: Delete a movie by id.
      parameters:
      - description: movie id
        in: path
        name: id
        required: true
        type: string
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete one movie.
      tags:
      - Movie
  /movies:
    get:
      description: Get a list of Movies.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Movie'
            type: array
      summary: Get all movies.
      tags:
      - Movie
    post:
      description: Creating a new Movie.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: the body to create a new movie
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.movieInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
      security:
      - BearerToken: []
      summary: Create New Movie.
      tags:
      - Movie
  /movies/{id}:
    get:
      description: Get a Movie by id.
      parameters:
      - description: movie id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
      summary: Get Movie.
      tags:
      - Movie
    patch:
      description: Update movie by id.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: movie id
        in: path
        name: id
        required: true
        type: string
      - description: the body to update an movie
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.movieInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
      security:
      - BearerToken: []
      summary: Update Movie.
      tags:
      - Movie
  /register:
    post:
      description: registering a user from public access.
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Register a user.
      tags:
      - Auth
swagger: "2.0"
